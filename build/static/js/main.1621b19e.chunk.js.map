{"version":3,"sources":["Components/Navigation/SearchBox.js","Components/Global/Global.js","Components/Global/GlobalList.js","Components/Logo/Logo.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","href","type","placeholder","onChange","Global","country","cases","deaths","GlobalList","globstats","map","list","i","key","Logo","alt","src","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","countries","filteredGlobstats","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uTAiBeA,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAEhC,OACC,yBAAKC,UAAU,UACb,uBAAGA,UAAU,SAASC,KAAK,SAA3B,QACA,uBAAGA,KAAK,cAAR,aACA,uBAAGA,KAAK,UAAR,SACA,2BAAOC,KAAK,SAASC,YAAY,iBAAiBC,SAAUL,MCIjDM,G,MAVA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAC/B,OACC,yBAAKR,UAAU,MACb,uCAAaM,EAAb,KACA,qCAAWC,EAAX,KACA,sCAAYC,EAAZ,QCeUC,EAnBI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACpB,OACC,6BAEGA,EAAUC,KAAI,SAACC,EAAMC,GACnB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLP,QAASI,EAAUG,GAAGP,QACtBC,MAAOG,EAAUG,GAAGN,MACpBC,OAAQE,EAAUG,GAAGL,cCJhBO,EARH,WACV,OACA,6BACA,yBAAKC,IAAK,QAAQC,IAAI,sDCqDTC,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAqBJC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACvB,YAAasB,EAAME,OAAOC,SArBvC,EAAKC,MAAQ,CACZd,UAAW,GACXZ,YAAa,IAJF,E,gEAUK,IAAD,OAClB2B,MAAM,0CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKR,SAAS,CAACX,UAAWmB,S,+BAYpB,IAAD,OACDC,EAAoBC,KAAKP,MAAMd,UAAUsB,QAAO,SAAAtB,GACpD,OAAOA,EAAUJ,QAAQ2B,cAAcC,SAAS,EAAKV,MAAM1B,YAAYmC,kBAEzE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,CAAWD,aAAcgC,KAAKZ,iBAC5B,gCACC,6DACC,2CAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYT,UAAWoB,IACvB,sE,GA1CUK,c,MCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1621b19e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\t\r\n\treturn (\r\n\t <div className=\"topnav\">\r\n\t   <a className=\"active\" href=\"#home\">Home</a>\r\n\t   <a href=\"#countries\">Countries</a>\r\n\t   <a href=\"#about\">About</a>\r\n\t   <input type='search' placeholder='Search Country' onChange={searchChange}/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Global.css';\r\n\r\n//Child Component\r\nconst Global = ({country, cases, deaths}) => {\r\n  return (\r\n   <div className='gb'>\r\n     <p>Country: {country} </p>\r\n     <p>Cases: {cases} </p>\r\n     <p>Deaths: {deaths} </p>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Global;","import React from 'react';\r\nimport Global from './Global';\r\n\r\n//parent component\r\n//pure(dumb) component\r\nconst GlobalList = ({ globstats }) => {  \r\n  return (\r\n   <div>\r\n\t{\r\n      globstats.map((list, i) => {\r\n        return (\r\n         <Global \r\n          key={i} \r\n          country={globstats[i].country}\r\n          cases={globstats[i].cases}\r\n          deaths={globstats[i].deaths} \r\n        />\r\n       );\r\n     })   \t\r\n\t}\r\n   </div> \r\n  );\r\n}\r\n\r\nexport default GlobalList;","import React from 'react';\r\n\r\n\r\nconst Logo= () => {\r\n  return (\r\n\t <div>\r\n\t <img alt ='globe' src='http://pngimg.com/uploads/globe/globe_PNG29.png'/>\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default Logo;","import React, {Component} from 'react';\r\nimport SearchBox from  './Components/Navigation/SearchBox';\r\nimport GlobalList from './Components/Global/GlobalList';\r\nimport Logo from './Components/Logo/Logo';\r\nimport './Components/Navigation/Navigation.css';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\n//smart component\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n     globstats: [],\r\n     searchfield: ''\r\n    }\r\n  }\r\n\r\n\r\n\r\ncomponentDidMount() {\r\n  fetch(\"https://corona.lmao.ninja/v2/countries\")\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(countries => {\r\n      this.setState({globstats: countries})\r\n  });\r\n}\r\n\r\n\r\n\r\nonSearchChange = (event) => {\r\n  this.setState({searchfield: event.target.value})  \r\n}\r\n\r\n\r\n\r\n  render() {\r\n    const filteredGlobstats = this.state.globstats.filter(globstats => {\r\n      return globstats.country.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    return ( \r\n      <div className='App'>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n          <header>\r\n           <h1>Global Covid-19 Virus Tracker</h1>\r\n            <h2>By Country</h2>\r\n          </header>\r\n        <Logo /> \r\n        <GlobalList globstats={filteredGlobstats}/>\r\n        <footer>Website by tpartridge&copy;2020</footer>\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n   <App />\n\t,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}